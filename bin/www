#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('expressframe:server');
var http = require('http');
var SerialPort = require("serialport");
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

// setup socket.io
// var io = require('socket.io')(server);
var socketio = require('socket.io');
// var io = require('socket.io');

//
var socketServer;
var serialPort;
var portName = '';
// var portName = 'COM4'; //change this to your Arduino port
// var portName = '/dev/tty.usbmodem1421';
var sendData = "";


// Read config.json <- the configure datas
fs.readFile('./config.json', function (err, data) {
  if (err) {
    throw err;
  }

  var configObj = JSON.parse(data);
  // console.log('portName:', configObj['portName']);
  portName = configObj['portName'];


  // Start httpServer
  var httpServer = http.createServer(app).listen(port);
  
  // Setup serial port
  serialListener(debug);

  // initial SocketIO
  initSocketIO(httpServer, debug);

});


/**
 * Listen on provided port, on all network interfaces.
 */
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);


function initSocketIO(httpServer, debug) {
  socketServer = socketio.listen(httpServer);
  // console.log(socketServer);

  if (debug == false) {
    socketServer.set('log level 1', 1);
  }

  socketServer.on('connection', function (socket) {
    console.log('socketServer connected!');

    socket.on('resCh0', function (data) {
      serialPort.write("{\"MODU\":\"RES0\",\"VALUE\":"+data+"}\r\n");
      console.log("{\"MODU\":\"RES0\",\"VALUE\":"+data+"}");
    });

  });

  socketServer.on('alarmInput', function (data) {
      console.log('alarm input in socketServer!');
  });


}

// // Setup serial port
// serialListener(debug);
// socketServer = io.listen(server);

// Listen on socket.io Events
// io.on('connection', function(socket){
//   console.log('io connection.');

//   socket.on('voltage1', function (data) {
//     serialPort.write("{\"MODU\":\"DA0\",\"VALUE\":"+data+"}\r\n");
//     console.log("{\"MODU\":\"DA0\",\"VALUE\":"+data+"}");
//   });

//   socket.on('voltage2', function (data) {
//     serialPort.write("{\"MODU\":\"DA1\",\"VALUE\":"+data+"}\r\n");
//     console.log("{\"MODU\":\"DA1\",\"VALUE\":"+data+"}");
//   });

//   socket.on('resCh0', function (data) {
//     serialPort.write("{\"MODU\":\"RES0\",\"VALUE\":"+data+"}\r\n");
//     console.log("{\"MODU\":\"RES0\",\"VALUE\":"+data+"}");
//   });

//   socket.on('resCh1', function (data) {
//     serialPort.write("{\"MODU\":\"RES1\",\"VALUE\":"+data+"}\r\n");
//     console.log("{\"MODU\":\"RES1\",\"VALUE\":"+data+"}");
//   });

//   socket.on('conOut', function (data) {
//     serialPort.write("{\"MODU\":\"DO\",\"VALUE\":"+data+"}\r\n");
//     console.log("{\"MODU\":\"DO\",\"VALUE\":"+data+"}");
//   });

//   socket.on('freqOut', function (data, channal) {
//     SerialPort.write("{\"MODU\":\"FREQ\",\"VALUE\":"+data+",\"CHANNAL\":"+channal+"}\r\n");
//     console.log("{\"MODU\":\"DO\",\"VALUE\":"+data+",\"CHANNAL\":"+channal+"}\r\n");
//   });

// });


// socketServer.on('alarmInput', function (data) {
//   console.log('>> alarm Input:');
// });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// Listen to serial port
function serialListener(debug)
{
    var receivedData = "";
    serialPort = new SerialPort(portName, {
      baudrate: 9600,
      // defaults for Arduino serial communication
      dataBits: 8,
      parity: 'none',
      stopBits: 1,
      flowControl: false,
      // Turn off the autoOpen
      autoOpen:false

    });

    serialPort.open(function (err) {
      if (err) {
        return console.log('Error opening port: ', err.message);
      }
    });
 
    serialPort.on("open", function () {
      console.log('open serial communication');
      // Listens to incoming data
      serialPort.on('data', function(data) {
        receivedData += data.toString();
        console.log("----------------");
        console.log("received data:");
        console.log(receivedData);
        
        
        // send the incoming data to browser with websockets.
        if (receivedData.indexOf('ALM')>=0){
          if (receivedData.length %26 == 0) {
            sendData = receivedData.substring(receivedData.length-26,receivedData.length-2);
            console.log('sendData:%s',sendData);
            socketServer.emit('alarmInput', sendData.substring(22,23));
            receivedData = '';
          }
        }
        else{
          // Clear receivedData Buffer
          // console.log('length of sendData:%d', receivedData.length);
          receivedData = '';
        }

      });  
    });

    serialPort.on('error', function (err) {
      console.log('Serial Error:', err.message);
    }); 
}
